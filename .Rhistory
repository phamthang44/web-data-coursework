BounceRate = as.numeric(gsub("%", "", Bounce.Rate....)),
ConversionRate = as.numeric(gsub("%", "", Conversion.Rate....)),
Transactions = as.numeric(Transactions),
Revenue = as.numeric(Revenue)
) %>%
select(BounceRate, ConversionRate, Transactions, Revenue) %>%
filter(
!is.na(BounceRate),
!is.na(ConversionRate),
!is.na(Transactions),
!is.na(Revenue)
)
# Clean data
library(dplyr)
data_cleaned <- data %>%
mutate(
BounceRate = as.numeric(gsub("%", "", Bounce.Rate)),
ConversionRate = as.numeric(gsub("%", "", Conversion.Rate....)),
Transactions = as.numeric(Transactions),
Revenue = as.numeric(Revenue)
) %>%
select(BounceRate, ConversionRate, Transactions, Revenue) %>%
filter(
!is.na(BounceRate),
!is.na(ConversionRate),
!is.na(Transactions),
!is.na(Revenue)
)
# Clean data
library(dplyr)
data_cleaned <- data %>%
mutate(
BounceRate = as.numeric(gsub("%", "", Bounce.Rate)),
ConversionRate = as.numeric(gsub("%", "", ConversionRate)),
Transactions = as.numeric(Transactions),
Revenue = as.numeric(Revenue)
) %>%
select(BounceRate, ConversionRate, Transactions, Revenue) %>%
filter(
!is.na(BounceRate),
!is.na(ConversionRate),
!is.na(Transactions),
!is.na(Revenue)
)
library(corrplot)
cor_matrix <- cor(data_cleaned, use = "complete.obs")
corrplot(cor_matrix, method = "color", addCoef.col = "black",
tl.cex = 0.9, number.cex = 0.8,
title = "Figure 2.3.1: Correlation Heatmap Between Key Metrics")
df_relationship <- data %>%
select(Bounce Rate, Conversion Rate (%), Revenue, Transactions)
cor_matrix <- round(cor(df_relationship, use = "complete.obs"), 2)
cor_df <- as.data.frame(cor_matrix) %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1, names_to = "Var2", values_to = "Correlation")
ggplot(cor_df, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
geom_text(aes(label = Correlation), color = "black", size = 4) +
scale_fill_gradient2(low = "red", mid = "white", high = "green",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
labs(title = "Heatmap: Bounce Rate vs Conversion, Transactions, Revenue",
x = "", y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_relationship <- data %>%
select(`Bounce Rate`, `Conversion Rate (%)`, `Revenue`, `Transactions`)
df_relationship <- data %>%
select(Bounce.Rate, ConversionRate, `Revenue`, `Transactions`)
cor_matrix <- round(cor(df_relationship, use = "complete.obs"), 2)
df_relationship <- data_cleaned %>%
select(Bounce.Rate, ConversionRate, `Revenue`, `Transactions`)
df_relationship <- data_cleaned %>%
select(BounceRate, ConversionRate, `Revenue`, `Transactions`)
cor_matrix <- round(cor(df_relationship, use = "complete.obs"), 2)
cor_df <- as.data.frame(cor_matrix) %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1, names_to = "Var2", values_to = "Correlation")
ggplot(cor_df, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
geom_text(aes(label = Correlation), color = "black", size = 4) +
scale_fill_gradient2(low = "red", mid = "white", high = "green",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
labs(title = "Heatmap: Bounce Rate vs Conversion, Transactions, Revenue",
x = "", y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_relationship <- data_cleaned %>%
select(BounceRate, ConversionRate, `Revenue`, `Transactions`)
cor_matrix <- round(cor(df_relationship, use = "complete.obs"), 2)
cor_df <- as.data.frame(cor_matrix) %>%
mutate(Var1 = rownames(.)) %>%
pivot_longer(cols = -Var1, names_to = "Var2", values_to = "Correlation")
ggplot(cor_df, aes(x = Var1, y = Var2, fill = Correlation)) +
geom_tile(color = "white") +
geom_text(aes(label = Correlation), color = "black", size = 4) +
scale_fill_gradient2(low = "red", mid = "white", high = "green",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
labs(title = "Heatmap: Bounce Rate vs Conversion, Transactions, Revenue",
x = "", y = "") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Bounce Rate vs Conversion Rate
ggplot(data_cleaned, aes(x = BounceRate, y = ConversionRate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.2: Bounce Rate vs Conversion Rate")
# Conversion Rate vs Revenue
ggplot(data_cleaned, aes(x = ConversionRate, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.3: Conversion Rate vs Revenue")
# Transactions vs Revenue
ggplot(data_cleaned, aes(x = Transactions, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.4: Transactions vs Revenue")
library(ggplot2)
# Bounce Rate vs Conversion Rate
ggplot(data_cleaned, aes(x = BounceRate, y = ConversionRate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.2: Bounce Rate vs Conversion Rate")
# Conversion Rate vs Revenue
ggplot(data_cleaned, aes(x = ConversionRate, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.3: Conversion Rate vs Revenue")
# Transactions vs Revenue
ggplot(data_cleaned, aes(x = Transactions, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.4: Transactions vs Revenue")
# Bounce Rate vs Revenue
ggplot(data_cleaned, aes(x = BounceRate, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.1: Bounce Rate vs Revenue")
library(ggplot2)
# Bounce Rate vs Conversion Rate
ggplot(data_cleaned, aes(x = BounceRate, y = ConversionRate)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.3: Bounce Rate vs Conversion Rate")
# Conversion Rate vs Revenue
ggplot(data_cleaned, aes(x = ConversionRate, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.4: Conversion Rate vs Revenue")
# Transactions vs Revenue
ggplot(data_cleaned, aes(x = Transactions, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.5: Transactions vs Revenue")
# Bounce Rate vs Revenue
ggplot(data_cleaned, aes(x = BounceRate, y = Revenue)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "Figure 2.3.2: Bounce Rate vs Revenue")
# Load libraries
library(tidyverse)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View as table
print(desc_stats)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
ggplot(data, aes_string(x = col)) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal() +
print()
}
}
# Load libraries
library(tidyverse)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View as table
print(desc_stats)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal() +
print()
}
}
# Load libraries
library(tidyverse)
library(rlang)  #
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View the statistics
print(desc_stats)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
# Load libraries
library(tidyverse)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View the statistics
print(desc_stats)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal()
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 12, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal()
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal()
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
# Load libraries
library(tidyverse)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View the statistics
print(desc_stats)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 10, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 10, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal()
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
# Load libraries
library(tidyverse)
library(knitr)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
# View the statistics
kable(desc_stats, caption = "Table 2.4.1: Descriptive Statistics Before Cleaning")
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
# Load libraries
library(tidyverse)
library(knitr)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
desc_table_long <- desc_stats %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Stat"),
names_sep = "_") %>%
pivot_wider(names_from = Stat, values_from = value)
# View the statistics
kable(desc_table_long, caption = "Table 2.4.1: Descriptive Statistics Before Cleaning")
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
# Load libraries
library(tidyverse)
library(knitr)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
desc_table_long <- desc_stats %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Stat"),
names_sep = "_") %>%
pivot_wider(names_from = Stat, values_from = value)
# View the statistics
kable(desc_table_long, caption = "Table 2.4.1: Descriptive Statistics Before Cleaning")
print(desc_table_long)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
# Load libraries
library(tidyverse)
library(knitr)
# Load data
data <- read.csv("../data/diabetes.csv")
# Descriptive statistics
desc_stats <- data %>%
summarise(across(everything(), list(
mean = ~mean(., na.rm = TRUE),
median = ~median(., na.rm = TRUE),
sd = ~sd(., na.rm = TRUE),
var = ~var(., na.rm = TRUE)
), .names = "{.col}_{.fn}"))
desc_table_long <- desc_stats %>%
pivot_longer(cols = everything(),
names_to = c("Variable", "Stat"),
names_sep = "_") %>%
pivot_wider(names_from = Stat, values_from = value)
# View the statistics
kable(desc_table_long, caption = "Table 3.1: Descriptive Statistics Before Cleaning")
print(desc_table_long)
# Plot histograms before cleaning
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning"), x = col, y = "Count") +
theme_minimal()
print(p)  # in biểu đồ
}
}
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal() +
theme(plot.title = element_text(size = 10))
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal() +
theme(plot.title = element_text(size = 5))
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
library(gridExtra)  # để gộp biểu đồ
# Gộp biểu đồ
plot_list <- list()
for (col in names(data)) {
if (is.numeric(data[[col]])) {
p <- ggplot(data, aes(x = !!sym(col))) +
geom_histogram(bins = 30, fill = "steelblue", color = "white") +
labs(title = paste("Histogram of", col, "before cleaning")) +
theme_minimal() +
theme(plot.title = element_text(size = 7))
plot_list[[col]] <- p
}
}
# Hiển thị 4 biểu đồ/lần (tuỳ bạn chia)
grid.arrange(grobs = plot_list[1:4], ncol = 2)
grid.arrange(grobs = plot_list[5:8], ncol = 2)
data <- read.csv("../data/diabetes.csv")
data
data <- read.csv("../data/diabetes.csv")
summary(data)
